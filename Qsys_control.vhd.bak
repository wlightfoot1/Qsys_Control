library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.std_logic_unsigned.all;

entity Qsys_LED_control is
	port(	clk					: in std_logic;
			reset_n				: in std_logic; --reset asserted low
			avs_s1_write		: in std_logic;
			avs_s1_read			: in std_logic;
			avs_s1_address		: in std_logic_vector(2 downto 0);
			avs_s1_readdata	: out std_logic_vector(31 downto 0);
			avs_s1_writedata	: in std_logic_vector(31 downto 0));
end entity;

architecture Qsys_LED_control_arch of Qsys_LED_control is
component ALU is
		port (clk		: in std_logic;
				reset 	: in std_logic;
				A, B 		: in std_logic_vector(31 downto 0);
				opcode	: in std_logic_vector(31 downto 0);
				status	: out std_logic_vector(31 downto 0);--Result Flags: (Z)ero, (N)egative, (F):result uses both result registers 
				Lresult	: out std_logic_vector(31 downto 0);
				Hresult	: out std_logic_vector(31 downto 0));
end component;

signal A_reg			: std_logic_vector(31 downto 0) := std_logic_vector(to_signed(0, 32));
signal B_reg			: std_logic_vector(31 downto 0) := std_logic_vector(to_signed(0, 32));
signal opcode_reg		: std_logic_vector(31 downto 0) := std_logic_vector(to_signed(0, 32));
signal Lresult_reg	: std_logic_vector(31 downto 0) := std_logic_vector(to_signed(0, 32));
signal Hresult_reg 	: std_logic_vector(31 downto 0) := std_logic_vector(to_signed(0, 32));
signal status_reg		: std_logic_vector(31 downto 0) := std_logic_vector(to_unsigned(0, 32));	--status register; signed or unsigned???

signal swapA			: std_logic_vector(31 downto 0) := std_logic_vector(to_signed(0, 32));
signal swapB			: std_logic_vector(31 downto 0) := std_logic_vector(to_signed(0, 32));

	begin	
		process (clk, avs_s1_read, opcode_reg) is
			begin
				if(rising_edge(clk) and opcode_reg = "110") then
					if(avs_s1_read = '1') then
						case (avs_s1_address) is
							when "000" => avs_s1_readdata <= A_reg;
							when "001" => avs_s1_readdata <= B_reg;
							when others => avs_s1_readdata <= (others => '0');
						end case;
					elsif(avs_s1_write = '1') then
						case (avs_s1_address) is
							when "000" => B_reg <= avs_s1_writedata;
							when "001" => A_reg <= avs_s1_writedata;
							when others => null;
						end case;
					else
						if(rising_edge(clk)) and (avs_s1_read = '1') then
							case (avs_s1_address) is
								when "000" => avs_s1_readdata <= A_reg;
								when "001" => avs_s1_readdata <= B_reg;
								when "010" => avs_s1_readdata <= opcode_reg;
								when "011" => avs_s1_readdata <= Lresult_reg;
								when "100" => avs_s1_readdata <= Hresult_reg;
								when "101" => avs_s1_readdata <= status_reg;
								when others => avs_s1_readdata <= (others => '0');
							end case;
						elsif(rising_edge(clk)) and (avs_s1_write = '1') then
							case (avs_s1_address) is
								when "000" => A_reg <= avs_s1_writedata;
								when "001" => B_reg <= avs_s1_writedata;
								when "010" => opcode_reg <= avs_s1_writedata;
								when "011" => Lresult_reg <= avs_s1_writedata;
								when "100" => Hresult_reg <= avs_s1_writedata;
								when "101" => status_reg <= avs_s1_writedata;
								when others => null;
							end case;
						end if;
					end if;
				end if;
		end process;
		
		A1	:	ALU port map(
				clk 		=> clk,
				reset		=> reset_n,
				A 			=> A_reg,
				B 			=> B_reg,
				opcode 	=> opcode_reg(2 downto 0),
				Lresult	=> Lresult_reg,
				Hresult	=> Hresult_reg,
				status	=> status_reg(2 downto 0));
				
end architecture;